{"version":3,"sources":["App.js","components/DrawChart.js","components/PredModel.js","components/ImageUploader.js","components/InfoButton.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","Component","DrawChart","console","log","this","props","yFromParent","className","es","data","labels","datasets","label","backgroundColor","borderWidth","options","title","display","text","fontSize","legend","position","defaultProps","PredModel","_this","tf","then","gt_model","catEl","InputImage","img","fromPixels","toFloat","offset","batched","div","reshape","y_pred","predict","dataSync","setState","predResult","catch","err","error","sate","components_DrawChart","ImageUploader","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","image","imagePreviewUrl","imgData","e","_this2","reader","FileReader","target","files","onloadend","result","readAsDataURL","refs","noData","_this3","$imagePreview","id","ref","src","type","onChange","handleImageChange","getImageData","components_PredModel","InfoButton","toggle","bind","assertThisInitialized","collapse","Button","color","size","onClick","style","marginBottom","Collapse","isOpen","Card","CardBody","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","components_InfoButton","components_ImageUploader","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"js/main.02a1d3fc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nclass App extends Component {\n  render() {\n    return (     \n      <div>\n            </div>\n    );\n  }\n}\nexport default App;\n","import React, {Component} from 'react';\nimport { Polar } from 'react-chartjs-2';\n\n\nclass DrawChart extends Component {   \n   static defaultProps ={\n          yFromParent : [5, 10, 10, 10, 5, 10, 10, 5, 10, 10,10, 10, 10, 10, 10]\n        }  \n  \n    render(){\n        console.log(\"***DrawChart***\", this.props.yFromParent);\n\n\n        return(\n            <div className = 'chart'>\n            <Polar \n             data = { {\n                labels: ['Pepper_Bacterial', 'Pepper_healthy', 'Potato_Early_blight',\n                'Potato_Late_blight', 'Potato_healthy', 'Tomato_Bacterial',\n                'Tomato_Early_blight' ,'Tomato_Late_blight' ,'Tomato_Leaf_Mold',\n                'Tomato_Septoria_leaf_spot' ,'Tomato_Spider_mites_Two_spotted_spider_mite',\n                'Tomato_Target_Spot' ,'Tomato_YellowLeaf_Curl_Virus' ,'Tomato_healthy',\n                'Tomato_mosaic_virus'],\n                datasets: [{\n                    label: 'Plant Disease',\n                    data: this.props.yFromParent ,              \n                    backgroundColor: [\n                        'rgba(0, 0, 0, 0.4)', //Bacterial\n                        'rgba(59, 139, 45, 0.4)', //healthy\n                        'rgba(114, 56, 1, 0.4)', //Early_blight\n                        'rgba(66, 34, 4, 0.4)', //Late_blight\n                        'rgba(59, 139, 45, 0.4)',//healthy\n                        'rgba(0, 0, 0, 0.4)', //Bacterial\n                        'rgba(26, 156, 216, 0.4)', //Early_blight\n                        'rgba(66, 34, 4, 0.4)', //Late_blight\n                        'rgba(211, 190, 70, 0.4)', //Leaf_Mold\n                        'rgba(76, 62, 209, 0.4)', //Septoria_leaf_spot\n                        'rgba(115, 113, 129, 0.4)', // Spider_mites_Two_spotted_spider_mite\n                        'rgba(206, 106, 136, 0.4)', //Target_Spot\n                        'rgba(245, 188, 3, 0.4)', // YellowLeaf_Curl_Virus\n                        'rgba(59, 139, 45, 0.4)', // //healthy\n                        'rgba(62, 143, 132, 0.4)' // mosaic_virus\n                    ]    ,                    \n                    borderWidth: 1\n                }]\n            }}\n             options = {{\n                 title :{\n                     display: true,\n                     text : 'Plant Disease Prediction',\n                     fontSize : 30\n                 },\n                 legend:{\n                     display:true,\n                     position:'right'\n                 }\n             }}\n             />  \n             </div>\n        ) } } \n\nexport default DrawChart;","import React, {Component} from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport DrawChart from './DrawChart';\n\nclass PredModel extends Component {\n    static defaultProps ={\n        predResult: [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\n        InputImage: ''\n      }  \n    render(){\n\n        const promise = tf.loadLayersModel('tea_model02/model.json');\n        promise.then((gt_model) => {\n        const catEl = this.props.InputImage;\n        const img = tf.browser.fromPixels(catEl).toFloat();\n        const offset = tf.scalar(225.0);\n        const normalized = img.div(offset);\n        const batched = normalized.reshape([1, 256, 256, 3]);   \n        const gopred = gt_model.predict(batched);      \n        const y_pred = gopred.dataSync() ;  // strip of one_dimention\n        console.log('y_pred: ', y_pred);\n        //const data = JSON.parse(result);\n        this.setState({  \n            predResult: y_pred\n        });\n\n    }).catch(function (err) {\n        console.error(err); // Error 출력\n    });   \n    \n       let {predResult} = this.sate\n        \n        return(\n          \n            <div>             \n                \n                <DrawChart yFromParent={predResult}/>   \n            </div>\n         \n       \n    );\n}\n}\nexport default PredModel;","import React, {Component} from 'react';\nimport * as tf from '@tensorflow/tfjs';\nimport PredModel from './PredModel';\n\nclass ImageUploader extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            image: '', \n            imagePreviewUrl: '',\n            imgData: '',\n        };\n    }\n    handleImageChange(e) {\n        let reader = new FileReader();\n        let image = e.target.files[0];     \n        console.log('check 1')\n        reader.onloadend = () => {\n            this.setState({\n                image: image,\n                imagePreviewUrl: reader.result\n            });\n        }\n        reader.readAsDataURL(image);\n    }\n\n    getImageData() {\n        let imgData = this.refs.noData;\n        console.log('check 2');\n        this.setState({\n            imgData: this.refs.noData,   \n        });\n        console.log('img_info',imgData)\n        \n        return imgData}   \n  \n     \n    render(){\n        console.log('check 4 - render')\n        let {imagePreviewUrl} = this.state;\n        let $imagePreview = null;\n        const noImageUrl = \"no-image.png\";\n        let {imgData} = this.state;   \n        \n        if (imagePreviewUrl){\n            $imagePreview = (<img id=\"input_img\" ref=\"noData\" src={imagePreviewUrl} />);\n    \n        } else {\n            $imagePreview = (<img id=\"no_img\" ref=\"noData\" src={noImageUrl}/>);\n    \n        }\n        return(\n            <div className=\"imagePreview\">\n                <input className=\"imageInput\" type=\"file\" onChange={(e)=> {this.handleImageChange(e); \n                 this.getImageData();}}/>\n            <div>\n                {$imagePreview}               \n                <PredModel InputImage={imgData}/>   \n            </div>\n        </div>\n    );\n}\n}\nexport default ImageUploader;","import React, {Component} from 'react';\nimport { Collapse, Button, CardBody, Card } from 'reactstrap';\n\nclass InfoButton extends Component {   \n  constructor(props) {\n    super(props);\n    this.toggle = this.toggle.bind(this);\n    this.state = { collapse: false };\n  }\n\n  toggle() {\n    this.setState(state => ({ collapse: !state.collapse }));\n  }\n\n  render() {\n    return (\n      <div>\n        <Button color=\"warning\" size=\"lg\" onClick={this.toggle} style={{ marginBottom: '1rem' }}>HELP !</Button>\n        <Collapse isOpen={this.state.collapse}>\n          <Card>\n            <CardBody>\n            Anim pariatur cliche reprehenderit,\n             enim eiusmod high life accusamus terry richardson ad squid. Nihil\n             anim keffiyeh helvetica, craft beer labore wes anderson cred\n             nesciunt sapiente ea proident.\n            </CardBody>\n          </Card>\n        </Collapse>\n      </div>\n    );\n  }\n}\nexport default InfoButton;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport ImageUploader from './components/ImageUploader';\nimport InfoButton from './components/InfoButton';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nReactDOM.render(<InfoButton />, document.getElementById('butt'));\nReactDOM.render(<ImageUploader />, document.getElementById('img'));\n//ReactDOM.render(<DrawChart />, document.getElementById('chart'));  //At index.html \n\n\nserviceWorker.unregister();"],"sourceRoot":""}